//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');


declare enum TProtocolVersion {
  HIVE_CLI_SERVICE_PROTOCOL_V1 = 0,
  HIVE_CLI_SERVICE_PROTOCOL_V2 = 1,
  HIVE_CLI_SERVICE_PROTOCOL_V3 = 2,
  HIVE_CLI_SERVICE_PROTOCOL_V4 = 3,
  HIVE_CLI_SERVICE_PROTOCOL_V5 = 4,
  HIVE_CLI_SERVICE_PROTOCOL_V6 = 5,
  HIVE_CLI_SERVICE_PROTOCOL_V7 = 6,
  HIVE_CLI_SERVICE_PROTOCOL_V8 = 7,
  HIVE_CLI_SERVICE_PROTOCOL_V9 = 8,
  HIVE_CLI_SERVICE_PROTOCOL_V10 = 9,
  HIVE_CLI_SERVICE_PROTOCOL_V11 = 10,
}

declare enum TTypeId {
  BOOLEAN_TYPE = 0,
  TINYINT_TYPE = 1,
  SMALLINT_TYPE = 2,
  INT_TYPE = 3,
  BIGINT_TYPE = 4,
  FLOAT_TYPE = 5,
  DOUBLE_TYPE = 6,
  STRING_TYPE = 7,
  TIMESTAMP_TYPE = 8,
  BINARY_TYPE = 9,
  ARRAY_TYPE = 10,
  MAP_TYPE = 11,
  STRUCT_TYPE = 12,
  UNION_TYPE = 13,
  USER_DEFINED_TYPE = 14,
  DECIMAL_TYPE = 15,
  NULL_TYPE = 16,
  DATE_TYPE = 17,
  VARCHAR_TYPE = 18,
  CHAR_TYPE = 19,
  INTERVAL_YEAR_MONTH_TYPE = 20,
  INTERVAL_DAY_TIME_TYPE = 21,
  TIMESTAMPLOCALTZ_TYPE = 22,
}

declare enum TStatusCode {
  SUCCESS_STATUS = 0,
  SUCCESS_WITH_INFO_STATUS = 1,
  STILL_EXECUTING_STATUS = 2,
  ERROR_STATUS = 3,
  INVALID_HANDLE_STATUS = 4,
}

declare enum TOperationState {
  INITIALIZED_STATE = 0,
  RUNNING_STATE = 1,
  FINISHED_STATE = 2,
  CANCELED_STATE = 3,
  CLOSED_STATE = 4,
  ERROR_STATE = 5,
  UKNOWN_STATE = 6,
  PENDING_STATE = 7,
  TIMEDOUT_STATE = 8,
}

declare enum TOperationType {
  EXECUTE_STATEMENT = 0,
  GET_TYPE_INFO = 1,
  GET_CATALOGS = 2,
  GET_SCHEMAS = 3,
  GET_TABLES = 4,
  GET_TABLE_TYPES = 5,
  GET_COLUMNS = 6,
  GET_FUNCTIONS = 7,
  UNKNOWN = 8,
}

declare enum TGetInfoType {
  CLI_MAX_DRIVER_CONNECTIONS = 0,
  CLI_MAX_CONCURRENT_ACTIVITIES = 1,
  CLI_DATA_SOURCE_NAME = 2,
  CLI_FETCH_DIRECTION = 8,
  CLI_SERVER_NAME = 13,
  CLI_SEARCH_PATTERN_ESCAPE = 14,
  CLI_DBMS_NAME = 17,
  CLI_DBMS_VER = 18,
  CLI_ACCESSIBLE_TABLES = 19,
  CLI_ACCESSIBLE_PROCEDURES = 20,
  CLI_CURSOR_COMMIT_BEHAVIOR = 23,
  CLI_DATA_SOURCE_READ_ONLY = 25,
  CLI_DEFAULT_TXN_ISOLATION = 26,
  CLI_IDENTIFIER_CASE = 28,
  CLI_IDENTIFIER_QUOTE_CHAR = 29,
  CLI_MAX_COLUMN_NAME_LEN = 30,
  CLI_MAX_CURSOR_NAME_LEN = 31,
  CLI_MAX_SCHEMA_NAME_LEN = 32,
  CLI_MAX_CATALOG_NAME_LEN = 34,
  CLI_MAX_TABLE_NAME_LEN = 35,
  CLI_SCROLL_CONCURRENCY = 43,
  CLI_TXN_CAPABLE = 46,
  CLI_USER_NAME = 47,
  CLI_TXN_ISOLATION_OPTION = 72,
  CLI_INTEGRITY = 73,
  CLI_GETDATA_EXTENSIONS = 81,
  CLI_NULL_COLLATION = 85,
  CLI_ALTER_TABLE = 86,
  CLI_ORDER_BY_COLUMNS_IN_SELECT = 90,
  CLI_SPECIAL_CHARACTERS = 94,
  CLI_MAX_COLUMNS_IN_GROUP_BY = 97,
  CLI_MAX_COLUMNS_IN_INDEX = 98,
  CLI_MAX_COLUMNS_IN_ORDER_BY = 99,
  CLI_MAX_COLUMNS_IN_SELECT = 100,
  CLI_MAX_COLUMNS_IN_TABLE = 101,
  CLI_MAX_INDEX_SIZE = 102,
  CLI_MAX_ROW_SIZE = 104,
  CLI_MAX_STATEMENT_LEN = 105,
  CLI_MAX_TABLES_IN_SELECT = 106,
  CLI_MAX_USER_NAME_LEN = 107,
  CLI_OJ_CAPABILITIES = 115,
  CLI_XOPEN_CLI_YEAR = 10000,
  CLI_CURSOR_SENSITIVITY = 10001,
  CLI_DESCRIBE_PARAMETER = 10002,
  CLI_CATALOG_NAME = 10003,
  CLI_COLLATION_SEQ = 10004,
  CLI_MAX_IDENTIFIER_LEN = 10005,
  CLI_ODBC_KEYWORDS = 10006,
}

declare enum TFetchOrientation {
  FETCH_NEXT = 0,
  FETCH_PRIOR = 1,
  FETCH_RELATIVE = 2,
  FETCH_ABSOLUTE = 3,
  FETCH_FIRST = 4,
  FETCH_LAST = 5,
}

declare enum TJobExecutionStatus {
  IN_PROGRESS = 0,
  COMPLETE = 1,
  NOT_AVAILABLE = 2,
}

declare class TTypeQualifierValue {
    public i32Value?: number;
    public stringValue?: string;

      constructor(args?: { i32Value?: number; stringValue?: string; });
  }

declare class TTypeQualifiers {
    public qualifiers: { [k: string]: TTypeQualifierValue; };

      constructor(args?: { qualifiers: { [k: string]: TTypeQualifierValue; }; });
  }

declare class TPrimitiveTypeEntry {
    public type: TTypeId;
    public typeQualifiers?: TTypeQualifiers;

      constructor(args?: { type: TTypeId; typeQualifiers?: TTypeQualifiers; });
  }

declare class TArrayTypeEntry {
    public objectTypePtr: number;

      constructor(args?: { objectTypePtr: number; });
  }

declare class TMapTypeEntry {
    public keyTypePtr: number;
    public valueTypePtr: number;

      constructor(args?: { keyTypePtr: number; valueTypePtr: number; });
  }

declare class TStructTypeEntry {
    public nameToTypePtr: { [k: string]: number; };

      constructor(args?: { nameToTypePtr: { [k: string]: number; }; });
  }

declare class TUnionTypeEntry {
    public nameToTypePtr: { [k: string]: number; };

      constructor(args?: { nameToTypePtr: { [k: string]: number; }; });
  }

declare class TUserDefinedTypeEntry {
    public typeClassName: string;

      constructor(args?: { typeClassName: string; });
  }

declare class TTypeEntry {
    public primitiveEntry?: TPrimitiveTypeEntry;
    public arrayEntry?: TArrayTypeEntry;
    public mapEntry?: TMapTypeEntry;
    public structEntry?: TStructTypeEntry;
    public unionEntry?: TUnionTypeEntry;
    public userDefinedTypeEntry?: TUserDefinedTypeEntry;

      constructor(args?: { primitiveEntry?: TPrimitiveTypeEntry; arrayEntry?: TArrayTypeEntry; mapEntry?: TMapTypeEntry; structEntry?: TStructTypeEntry; unionEntry?: TUnionTypeEntry; userDefinedTypeEntry?: TUserDefinedTypeEntry; });
  }

declare class TTypeDesc {
    public types: TTypeEntry[];

      constructor(args?: { types: TTypeEntry[]; });
  }

declare class TColumnDesc {
    public columnName: string;
    public typeDesc: TTypeDesc;
    public position: number;
    public comment?: string;

      constructor(args?: { columnName: string; typeDesc: TTypeDesc; position: number; comment?: string; });
  }

declare class TTableSchema {
    public columns: TColumnDesc[];

      constructor(args?: { columns: TColumnDesc[]; });
  }

declare class TBoolValue {
    public value?: boolean;

      constructor(args?: { value?: boolean; });
  }

declare class TByteValue {
    public value?: any;

      constructor(args?: { value?: any; });
  }

declare class TI16Value {
    public value?: number;

      constructor(args?: { value?: number; });
  }

declare class TI32Value {
    public value?: number;

      constructor(args?: { value?: number; });
  }

declare class TI64Value {
    public value?: Int64;

      constructor(args?: { value?: Int64; });
  }

declare class TDoubleValue {
    public value?: number;

      constructor(args?: { value?: number; });
  }

declare class TStringValue {
    public value?: string;

      constructor(args?: { value?: string; });
  }

declare class TColumnValue {
    public boolVal?: TBoolValue;
    public byteVal?: TByteValue;
    public i16Val?: TI16Value;
    public i32Val?: TI32Value;
    public i64Val?: TI64Value;
    public doubleVal?: TDoubleValue;
    public stringVal?: TStringValue;

      constructor(args?: { boolVal?: TBoolValue; byteVal?: TByteValue; i16Val?: TI16Value; i32Val?: TI32Value; i64Val?: TI64Value; doubleVal?: TDoubleValue; stringVal?: TStringValue; });
  }

declare class TRow {
    public colVals: TColumnValue[];

      constructor(args?: { colVals: TColumnValue[]; });
  }

declare class TBoolColumn {
    public values: boolean[];
    public nulls: Buffer;

      constructor(args?: { values: boolean[]; nulls: Buffer; });
  }

declare class TByteColumn {
    public values: any[];
    public nulls: Buffer;

      constructor(args?: { values: any[]; nulls: Buffer; });
  }

declare class TI16Column {
    public values: number[];
    public nulls: Buffer;

      constructor(args?: { values: number[]; nulls: Buffer; });
  }

declare class TI32Column {
    public values: number[];
    public nulls: Buffer;

      constructor(args?: { values: number[]; nulls: Buffer; });
  }

declare class TI64Column {
    public values: Int64[];
    public nulls: Buffer;

      constructor(args?: { values: Int64[]; nulls: Buffer; });
  }

declare class TDoubleColumn {
    public values: number[];
    public nulls: Buffer;

      constructor(args?: { values: number[]; nulls: Buffer; });
  }

declare class TStringColumn {
    public values: string[];
    public nulls: Buffer;

      constructor(args?: { values: string[]; nulls: Buffer; });
  }

declare class TBinaryColumn {
    public values: Buffer[];
    public nulls: Buffer;

      constructor(args?: { values: Buffer[]; nulls: Buffer; });
  }

declare class TColumn {
    public boolVal?: TBoolColumn;
    public byteVal?: TByteColumn;
    public i16Val?: TI16Column;
    public i32Val?: TI32Column;
    public i64Val?: TI64Column;
    public doubleVal?: TDoubleColumn;
    public stringVal?: TStringColumn;
    public binaryVal?: TBinaryColumn;

      constructor(args?: { boolVal?: TBoolColumn; byteVal?: TByteColumn; i16Val?: TI16Column; i32Val?: TI32Column; i64Val?: TI64Column; doubleVal?: TDoubleColumn; stringVal?: TStringColumn; binaryVal?: TBinaryColumn; });
  }

declare class TRowSet {
    public startRowOffset: Int64;
    public rows: TRow[];
    public columns?: TColumn[];
    public binaryColumns?: Buffer;
    public columnCount?: number;

      constructor(args?: { startRowOffset: Int64; rows: TRow[]; columns?: TColumn[]; binaryColumns?: Buffer; columnCount?: number; });
  }

declare class TStatus {
    public statusCode: TStatusCode;
    public infoMessages?: string[];
    public sqlState?: string;
    public errorCode?: number;
    public errorMessage?: string;

      constructor(args?: { statusCode: TStatusCode; infoMessages?: string[]; sqlState?: string; errorCode?: number; errorMessage?: string; });
  }

declare class THandleIdentifier {
    public guid: Buffer;
    public secret: Buffer;

      constructor(args?: { guid: Buffer; secret: Buffer; });
  }

declare class TSessionHandle {
    public sessionId: THandleIdentifier;

      constructor(args?: { sessionId: THandleIdentifier; });
  }

declare class TOperationHandle {
    public operationId: THandleIdentifier;
    public operationType: TOperationType;
    public hasResultSet: boolean;
    public modifiedRowCount?: number;

      constructor(args?: { operationId: THandleIdentifier; operationType: TOperationType; hasResultSet: boolean; modifiedRowCount?: number; });
  }

declare class TOpenSessionReq {
    public client_protocol?: TProtocolVersion;
    public username?: string;
    public password?: string;
    public configuration?: { [k: string]: string; };

      constructor(args?: { client_protocol?: TProtocolVersion; username?: string; password?: string; configuration?: { [k: string]: string; }; });
  }

declare class TOpenSessionResp {
    public status: TStatus;
    public serverProtocolVersion?: TProtocolVersion;
    public sessionHandle?: TSessionHandle;
    public configuration?: { [k: string]: string; };

      constructor(args?: { status: TStatus; serverProtocolVersion?: TProtocolVersion; sessionHandle?: TSessionHandle; configuration?: { [k: string]: string; }; });
  }

declare class TSetClientInfoReq {
    public sessionHandle: TSessionHandle;
    public configuration?: { [k: string]: string; };

      constructor(args?: { sessionHandle: TSessionHandle; configuration?: { [k: string]: string; }; });
  }

declare class TSetClientInfoResp {
    public status: TStatus;

      constructor(args?: { status: TStatus; });
  }

declare class TCloseSessionReq {
    public sessionHandle: TSessionHandle;

      constructor(args?: { sessionHandle: TSessionHandle; });
  }

declare class TCloseSessionResp {
    public status: TStatus;

      constructor(args?: { status: TStatus; });
  }

declare class TGetInfoValue {
    public stringValue?: string;
    public smallIntValue?: number;
    public integerBitmask?: number;
    public integerFlag?: number;
    public binaryValue?: number;
    public lenValue?: Int64;

      constructor(args?: { stringValue?: string; smallIntValue?: number; integerBitmask?: number; integerFlag?: number; binaryValue?: number; lenValue?: Int64; });
  }

declare class TGetInfoReq {
    public sessionHandle: TSessionHandle;
    public infoType: TGetInfoType;

      constructor(args?: { sessionHandle: TSessionHandle; infoType: TGetInfoType; });
  }

declare class TGetInfoResp {
    public status: TStatus;
    public infoValue: TGetInfoValue;

      constructor(args?: { status: TStatus; infoValue: TGetInfoValue; });
  }

declare class TExecuteStatementReq {
    public sessionHandle: TSessionHandle;
    public statement: string;
    public confOverlay?: { [k: string]: string; };
    public runAsync?: boolean;
    public queryTimeout?: Int64;

      constructor(args?: { sessionHandle: TSessionHandle; statement: string; confOverlay?: { [k: string]: string; }; runAsync?: boolean; queryTimeout?: Int64; });
  }

declare class TExecuteStatementResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetTypeInfoReq {
    public sessionHandle: TSessionHandle;

      constructor(args?: { sessionHandle: TSessionHandle; });
  }

declare class TGetTypeInfoResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetCatalogsReq {
    public sessionHandle: TSessionHandle;

      constructor(args?: { sessionHandle: TSessionHandle; });
  }

declare class TGetCatalogsResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetSchemasReq {
    public sessionHandle: TSessionHandle;
    public catalogName?: string;
    public schemaName?: string;

      constructor(args?: { sessionHandle: TSessionHandle; catalogName?: string; schemaName?: string; });
  }

declare class TGetSchemasResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetTablesReq {
    public sessionHandle: TSessionHandle;
    public catalogName?: string;
    public schemaName?: string;
    public tableName?: string;
    public tableTypes?: string[];

      constructor(args?: { sessionHandle: TSessionHandle; catalogName?: string; schemaName?: string; tableName?: string; tableTypes?: string[]; });
  }

declare class TGetTablesResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetTableTypesReq {
    public sessionHandle: TSessionHandle;

      constructor(args?: { sessionHandle: TSessionHandle; });
  }

declare class TGetTableTypesResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetColumnsReq {
    public sessionHandle: TSessionHandle;
    public catalogName?: string;
    public schemaName?: string;
    public tableName?: string;
    public columnName?: string;

      constructor(args?: { sessionHandle: TSessionHandle; catalogName?: string; schemaName?: string; tableName?: string; columnName?: string; });
  }

declare class TGetColumnsResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetFunctionsReq {
    public sessionHandle: TSessionHandle;
    public catalogName?: string;
    public schemaName?: string;
    public functionName: string;

      constructor(args?: { sessionHandle: TSessionHandle; catalogName?: string; schemaName?: string; functionName: string; });
  }

declare class TGetFunctionsResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetPrimaryKeysReq {
    public sessionHandle: TSessionHandle;
    public catalogName?: string;
    public schemaName?: string;
    public tableName?: string;

      constructor(args?: { sessionHandle: TSessionHandle; catalogName?: string; schemaName?: string; tableName?: string; });
  }

declare class TGetPrimaryKeysResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetCrossReferenceReq {
    public sessionHandle: TSessionHandle;
    public parentCatalogName?: string;
    public parentSchemaName?: string;
    public parentTableName?: string;
    public foreignCatalogName?: string;
    public foreignSchemaName?: string;
    public foreignTableName?: string;

      constructor(args?: { sessionHandle: TSessionHandle; parentCatalogName?: string; parentSchemaName?: string; parentTableName?: string; foreignCatalogName?: string; foreignSchemaName?: string; foreignTableName?: string; });
  }

declare class TGetCrossReferenceResp {
    public status: TStatus;
    public operationHandle?: TOperationHandle;

      constructor(args?: { status: TStatus; operationHandle?: TOperationHandle; });
  }

declare class TGetOperationStatusReq {
    public operationHandle: TOperationHandle;
    public getProgressUpdate?: boolean;

      constructor(args?: { operationHandle: TOperationHandle; getProgressUpdate?: boolean; });
  }

declare class TGetOperationStatusResp {
    public status: TStatus;
    public operationState?: TOperationState;
    public sqlState?: string;
    public errorCode?: number;
    public errorMessage?: string;
    public taskStatus?: string;
    public operationStarted?: Int64;
    public operationCompleted?: Int64;
    public hasResultSet?: boolean;
    public progressUpdateResponse?: TProgressUpdateResp;
    public numModifiedRows?: Int64;

      constructor(args?: { status: TStatus; operationState?: TOperationState; sqlState?: string; errorCode?: number; errorMessage?: string; taskStatus?: string; operationStarted?: Int64; operationCompleted?: Int64; hasResultSet?: boolean; progressUpdateResponse?: TProgressUpdateResp; numModifiedRows?: Int64; });
  }

declare class TCancelOperationReq {
    public operationHandle: TOperationHandle;

      constructor(args?: { operationHandle: TOperationHandle; });
  }

declare class TCancelOperationResp {
    public status: TStatus;

      constructor(args?: { status: TStatus; });
  }

declare class TCloseOperationReq {
    public operationHandle: TOperationHandle;

      constructor(args?: { operationHandle: TOperationHandle; });
  }

declare class TCloseOperationResp {
    public status: TStatus;

      constructor(args?: { status: TStatus; });
  }

declare class TGetResultSetMetadataReq {
    public operationHandle: TOperationHandle;

      constructor(args?: { operationHandle: TOperationHandle; });
  }

declare class TGetResultSetMetadataResp {
    public status: TStatus;
    public schema?: TTableSchema;

      constructor(args?: { status: TStatus; schema?: TTableSchema; });
  }

declare class TFetchResultsReq {
    public operationHandle: TOperationHandle;
    public orientation?: TFetchOrientation;
    public maxRows: Int64;
    public fetchType?: number;

      constructor(args?: { operationHandle: TOperationHandle; orientation?: TFetchOrientation; maxRows: Int64; fetchType?: number; });
  }

declare class TFetchResultsResp {
    public status: TStatus;
    public hasMoreRows?: boolean;
    public results?: TRowSet;

      constructor(args?: { status: TStatus; hasMoreRows?: boolean; results?: TRowSet; });
  }

declare class TGetDelegationTokenReq {
    public sessionHandle: TSessionHandle;
    public owner: string;
    public renewer: string;

      constructor(args?: { sessionHandle: TSessionHandle; owner: string; renewer: string; });
  }

declare class TGetDelegationTokenResp {
    public status: TStatus;
    public delegationToken?: string;

      constructor(args?: { status: TStatus; delegationToken?: string; });
  }

declare class TCancelDelegationTokenReq {
    public sessionHandle: TSessionHandle;
    public delegationToken: string;

      constructor(args?: { sessionHandle: TSessionHandle; delegationToken: string; });
  }

declare class TCancelDelegationTokenResp {
    public status: TStatus;

      constructor(args?: { status: TStatus; });
  }

declare class TRenewDelegationTokenReq {
    public sessionHandle: TSessionHandle;
    public delegationToken: string;

      constructor(args?: { sessionHandle: TSessionHandle; delegationToken: string; });
  }

declare class TRenewDelegationTokenResp {
    public status: TStatus;

      constructor(args?: { status: TStatus; });
  }

declare class TProgressUpdateResp {
    public headerNames: string[];
    public rows: string[][];
    public progressedPercentage: number;
    public status: TJobExecutionStatus;
    public footerSummary: string;
    public startTime: Int64;

      constructor(args?: { headerNames: string[]; rows: string[][]; progressedPercentage: number; status: TJobExecutionStatus; footerSummary: string; startTime: Int64; });
  }

declare class TGetQueryIdReq {
    public operationHandle: TOperationHandle;

      constructor(args?: { operationHandle: TOperationHandle; });
  }

declare class TGetQueryIdResp {
    public queryId: string;

      constructor(args?: { queryId: string; });
  }

declare const PRIMITIVE_TYPES: TTypeId[];

declare const COMPLEX_TYPES: TTypeId[];

declare const COLLECTION_TYPES: TTypeId[];

declare const TYPE_NAMES: { [k: number /*TTypeId*/]: string; };

declare const CHARACTER_MAXIMUM_LENGTH: string;

declare const PRECISION: string;

declare const SCALE: string;
